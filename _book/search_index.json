[
["index.html", "A Minimal Book Example Chapter 1 Prerequisites", " A Minimal Book Example Yihui Xie 2020-03-02 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 4. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2020) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["fiches-de-documentation.html", "Chapter 3 Fiches de documentation 3.1 Importer des fichiers plats (CSV, TSV, TXT) 3.2 Importer des données depuis SAS vers R", " Chapter 3 Fiches de documentation 3.1 Importer des fichiers plats (CSV, TSV, TXT) 3.1.1 Tâches concernées / cas d’usage L’utilisateur souhaite importer dans R des données stockées dans un format plat (.txt, .csv, .tsv). 3.1.2 Recommandations petites données: readr grosses données: data.table packages non recommandés: voir la note de Christian, et dire que read.csv n’est pas performant (ni read.delim). 3.1.3 Quelques détails sur les packages recommandés 3.1.3.1 read_csv et ses cousins options: encoding; sélection de variables; type des variables? 3.1.3.2 fread() encoding; choix du séparateur; sélection de variables; type des variables; barre de progrès. library(data.table) df &lt;- fread() 3.1.4 Bonnes pratiques Ne pas importer trop de colonnes. 3.1.5 Pour aller plus loin 3.1.5.1 Quelques conseils Choisir le package en fonction du format de sortie (vibble versus dt) 3.1.5.2 Ressources doc de fread doc de data.table éventuel fiche sur les types de données en R. 3.2 Importer des données depuis SAS vers R 3.2.1 Tâches concernées / cas d’usage L’utilisateur souhaite importer dans R des données stockées sous format SAS. 3.2.2 Recommandations Pour des données de taille petite ou moyenne (moins de 1 Go environ), l’usage du package haven est recommandé. Pour des fichiers de taille importante (plus de 1 Go environ), il est recommandé de procéder en deux temps: Exporter les données SAS en format CSV; Importer en R les données CSV. Les packages suivants ne sont pas recommandés pour importer des données SAS : sas7dbat, foreign, Hmisc, SASxport. 3.2.3 Quelques détails sur les packages recommandés 3.2.3.1 Comment utiliser haven? La fonction du package haven à utiliser se nomme read_sas() library(haven) ## chargement d&#39;une table RP depuis le lecteur GEN - environ 20&quot; dfRP &lt;- read_sas(&quot;W:/A1090/GEN_A1090990_DINDISAS/RPADUDIF.sas7bdat&quot;) Options de read_sas() Sélectionner les colonnes parmi celles présentes dans la base SAS dfRP &lt;- read_sas(&quot;W:/A1090/GEN_A1090990_DINDISAS/RPADUDIF.sas7bdat&quot;, cols_only = c(&quot;NUMERO&quot;, &quot;ANAIX&quot;, &quot;DPNAIX&quot;)) Obtenir la liste des labels de colonne de la table importée avec haven library(sjlabelled) get_label(dfRP) encoding - Cet argument est à renseigner uniquement si l’importation des caractères accentués se passe mal. La valeur à indiquer dépend de la source. dfRP &lt;- read_sas(&quot;W:/A1090/GEN_A1090990_DINDISAS/RPADUDIF.sas7bdat&quot;, encoding = &quot;UTF-8&quot;) 3.2.3.2 Comment procéder en deux temps? Export depuis SAS: exemple de code options mprint mlogic notes; libname donnees &quot;W:/A1090/GEN_A1090990_DINDISAS/&quot;; PROC EXPORT DATA= donnees.RPADUDIF OUTFILE= &quot;U:/RP.csv&quot; DBMS=CSV REPLACE; PUTNAMES=YES; RUN; Renvoyer à la fiche import de fichiers plats. 3.2.4 Pour aller plus loin 3.2.4.1 Quelques conseils N’importer que les colonnes nécessaires. Les tables SAS compressées en BINARY ne sont pas prises en charge par le package haven. Il faut donc procéder en deux étapes (export en CSV puis import dans R) 3.2.5 Références doc de haven library(haven) help(read_sas) fiche import de fichiers plats "],
["methods.html", "Chapter 4 Methods", " Chapter 4 Methods We describe our methods in this chapter. "],
["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]
